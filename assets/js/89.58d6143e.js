(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{469:function(t,e,r){"use strict";r.r(e);var a=r(26),v=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#架构"}},[t._v("#")]),t._v(" 架构")]),t._v(" "),r("h2",{attrs:{id:"前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),r("p",[t._v("在正文之前，笔者觉得还是很有必要来唠唠嗑的。一谈到架构这个问题，很多人些许有些慌了，\n是不是很难啊？是不是很复杂啊？是不是得精通各种技术才能学啊？")]),t._v(" "),r("p",[t._v("当然不是，架构不是具体实现。你只需要有一点想象力，有一点理解能力，\n另外还有一点看图能力，你就能大概的理解本章的内容。")]),t._v(" "),r("p",[t._v("当然了，如果你专注于开发，啪啦啪啦的写代码完全可以略过本节，因为本小节没有代码；\n如果你想更好的开发、更有计划的开发甚至想参与 lin-cms 的开发，那么本节是你必不可少的一节。")]),t._v(" "),r("h2",{attrs:{id:"结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#结构"}},[t._v("#")]),t._v(" 结构")]),t._v(" "),r("p",[r("code",[t._v("架构")]),t._v("这个词或许显得有些高大上，所以我们先以"),r("code",[t._v("结构")]),t._v("这个词来理解理解。一般地，我们\n可以把结构大致的分为两类——即水平结构和垂直结构。")]),t._v(" "),r("p",[t._v("这样就很好理解了，一个产品的落地可能是水平结构，可能是垂直结构，当然了，大概率还\n是水平+垂直的结构。")]),t._v(" "),r("p",[r("code",[t._v("lin-cms")]),t._v("是鲜明的"),r("code",[t._v("垂直结构")]),t._v("，且被分为了三层，"),r("code",[t._v("core")]),t._v("，"),r("code",[t._v("starter")]),t._v("和"),r("code",[t._v("demo")]),t._v("。")]),t._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[t._v("--------       -----------       ----------\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("      "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("       "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("         "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("       "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("        "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" core "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ---"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" starter "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ---"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  demo  "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("      "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("       "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("         "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("       "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("        "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n--------       -----------       ----------\n")])])]),r("p",[t._v("不要被上面的图所误导，虽然它是横着画的，可是它确实是从最底层的"),r("code",[t._v("core")]),t._v("一直通过箭头\n向上推进到"),r("code",[t._v("demo")]),t._v("的，所以它确实是垂直结构。")]),t._v(" "),r("p",[t._v("而且这三层是上下依赖的，即"),r("code",[t._v("demo")]),t._v("依赖"),r("code",[t._v("starter")]),t._v("，"),r("code",[t._v("starter")]),t._v("依赖"),r("code",[t._v("core")]),t._v("。")]),t._v(" "),r("p",[t._v("说了那么多，究竟什么是"),r("code",[t._v("demo")]),t._v("和"),r("code",[t._v("starter")]),t._v("啊？先卖个关子，如果你对 lin-cms 的开发足\n够熟悉可以先琢磨琢磨。答案嘛，别急，在下面！")]),t._v(" "),r("h2",{attrs:{id:"边界"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#边界"}},[t._v("#")]),t._v(" 边界")]),t._v(" "),r("p",[t._v("既然谈到"),r("code",[t._v("分层")]),t._v("，那就必须得谈到另一个概念——"),r("code",[t._v("边界")]),t._v("。例如，core 与 starter 这两层是\n被什么分开的，当然是被边界分开的。")]),t._v(" "),r("p",[t._v("那么"),r("code",[t._v("lin-cms")]),t._v("的结构必然会存在两个边界，分别用来分开"),r("code",[t._v("core")]),t._v("与"),r("code",[t._v("starter")]),t._v("以及\n"),r("code",[t._v("starter")]),t._v("与"),r("code",[t._v("demo")]),t._v("。这两个边界如下：")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("lin 边界。我们在 core 中封装了一些可复用的类库，这些类库不仅可以帮\n助"),r("code",[t._v("starter")]),t._v("层进行快速的开发，还能帮助其它的 java 项目进行开发。这样的类库需放\n在 core 里面，它可以服务于其它的项目。我们以 lin 为边界来区分，把可复用的类库\n放到了 core 中，把跟 lin 相关的放在了 starter 中。如果你熟悉 spring-boot，那么\n一定能理解"),r("code",[t._v("starter")]),t._v("，没错，这里的 starter 就是 spring-boot 的 starter，它提供\n了自动装配和配置信息。")])]),t._v(" "),r("li",[r("p",[t._v("业务边界。"),r("code",[t._v("starter")]),t._v("提供了配置和具体的业务结构，但 starter 中不存放任何与具体业\n务相关的代码，应该把业务代码存放在 demo 中。starter 中应是业务的结构和逻辑，而\n将具体的业务实现交给 demo。")])])]),t._v(" "),r("p",[t._v("好，你可能已经蒙圈了。没关系，你只需要知道，我们的三层结构是通过两个边界区分的，\n这两个边界分别是"),r("code",[t._v("与lin有无关系")]),t._v("，"),r("code",[t._v("与业务有无关系")]),t._v("。")]),t._v(" "),r("p",[t._v("知道了边界以后，我们再来摆出"),r("code",[t._v("core")]),t._v("、"),r("code",[t._v("starter")]),t._v("和"),r("code",[t._v("demo")]),t._v("的定义。")]),t._v(" "),r("ul",[r("li",[r("code",[t._v("core")]),t._v("：全名 lin-cms-core，其实就是一堆基础类库，方便我们进行业务开发。")]),t._v(" "),r("li",[r("code",[t._v("starter")]),t._v("：全名 lin-cms-starter，其实就是 spring-boot 里面的 starter，提供自动\n装配和默认配置，但不涉及具体业务的实现。")]),t._v(" "),r("li",[r("code",[t._v("demo")]),t._v("：全名 lin-cms-spring-boot，也就是我们的工程项目。")])]),t._v(" "),r("h2",{attrs:{id:"功能点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#功能点"}},[t._v("#")]),t._v(" 功能点")]),t._v(" "),r("p",[t._v("下面我们将会概括性的介绍一下"),r("code",[t._v("core")]),t._v("与"),r("code",[t._v("starter")]),t._v("的功能。")]),t._v(" "),r("h3",{attrs:{id:"core"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#core"}},[t._v("#")]),t._v(" core")]),t._v(" "),r("p",[t._v("代码目录如下：")]),t._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[t._v("core/src/main/java/io/github/talelin/core/\n├── annotation  注解类\n├── constant      常量类\n├── enumeration       枚举类\n├── logger      日志\n├── token       令牌\n└── util       工具函数类\n")])])]),r("p",[t._v("在文件夹的后方，我们已经标注了其作用。")]),t._v(" "),r("p",[t._v("目前来说，core 的功能其实不多，主要如下：")]),t._v(" "),r("ol",[r("li",[t._v("定义了 lin-cms 里面需要的注解和枚举。")]),t._v(" "),r("li",[t._v("自定义 logback appender 类，方便实现文件日志记录。")]),t._v(" "),r("li",[t._v("提供了令牌类库，方便使用 JWT。")])]),t._v(" "),r("h3",{attrs:{id:"starter"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#starter"}},[t._v("#")]),t._v(" starter")]),t._v(" "),r("p",[t._v("代码目录如下：")]),t._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[t._v("├── autoconfigure 自动装配类\n├── bean          java bean，全局信息类\n├── exception     异常类\n├── interceptor   spring-mvc 拦截器\n├── interfaces    抽象接口\n├── response      统一相应类\n├── util          工具类\n└── validator     校验类\n")])])]),r("p",[t._v("在文件夹的后方，我们也已经标注了其作用。")]),t._v(" "),r("p",[t._v("starter 的主要功能如下：")]),t._v(" "),r("ol",[r("li",[t._v("提供自动配置装配")]),t._v(" "),r("li",[t._v("提供常见异常类，方便在工程中直接使用。")]),t._v(" "),r("li",[t._v("提供抽象接口，供工程项目实现。")]),t._v(" "),r("li",[t._v("提供校验类，供工程项目使用。")])]),t._v(" "),r("RightMenu")],1)}),[],!1,null,null,null);e.default=v.exports}}]);