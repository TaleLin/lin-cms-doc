(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{403:function(t,n,e){"use strict";e.r(n);var s=e(26),a=Object(s.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"lin-的整体架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lin-的整体架构"}},[t._v("#")]),t._v(" Lin 的整体架构")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("Lin 的整体架构十分清晰，但本章注定是比较难阅读的一章，请确保你拥有一定的 Flask 基础，并且拥有一定的真实项目开发经验。")])]),t._v(" "),e("p",[t._v("Lin 可以被很好的分为三大部分，分别是根目录下的核心文件，api 目录下的业务接口以及内置的插件目录。具体的目录架构如下：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   // 根目录\n│   code.md // 错误码定义文件\n│   core.py // Lin的核心，负责插件的加载和管理\n│   db.py // 数据库部分\n│   enums.py // 枚举部分\n│   exception.py // 全局异常部分\n│   forms.py // 参数校验部分\n│   interface.py // 接口类部分\n│   jwt.py // 令牌部分\n│   loader.py // 加载器部分\n│   plugin.py // 插件类部分\n│   redprint.py // 红图\n│   util.py // 工具文件\n│   __init__.py // 入口文件\n│\n├───api\n│   │   // api目录\n│   │   admin.py // 管理员独有业务接口\n│   │   test.py // 测试接口\n│   │   user.py // 用户接口\n│   │   __init__.py // 入口文件\n│\n│\n├───plugins\n│   │   // 插件目录\n│   ├───logger // 日志插件\n│   │       config.py  // 插件配置文件\n│   │       controller.py  // 插件视图函数文件\n│   │       log.py // 日志插件的核心类库\n│   │       model.py // 插件的模型类\n│   │       service.py // 插件的业务类\n│   │       __init__.py // 入口文件\n│   │\n│   └───notify // 消息推送插件\n│           config.py // 同上（logger插件）\n│           controller.py\n│           model.py\n│           notify.py\n│           sse.py\n│           __init__.py\n")])])]),e("h2",{attrs:{id:"核心部分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#核心部分"}},[t._v("#")]),t._v(" 核心部分")]),t._v(" "),e("p",[t._v("Lin 的核心是一套标准的 Restful API 的基础框架，这套基础框架包括：")]),t._v(" "),e("ul",[e("li",[t._v("全局异常处理： Lin 是一套遵循前后端分离的框架，因此标准化的异常处理是必须的，它是前、后端通信的桥梁。一般的，当前、后端通信发生异常时，Lin 会返回如下数据：")])]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"error_code"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10030")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"msg"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"参数错误"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"request"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"POST  /login"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("这是一个登陆时参数错误的异常结果，在数据中，我们可以很清楚的得到错误信息"),e("code",[t._v("msg")]),t._v("和请求路径、请求方法"),e("code",[t._v("request")]),t._v("，这些都可以帮助前端人员快速定位错误。\n"),e("code",[t._v("error_code(错误码)")]),t._v("是异常中一个非常重要的概念，它是每一类异常（例如：参数异常被归为一类异常）的唯一标识。一般的，后端人员会为前端人员提供一套标准的 error_code 文档，当前端在请求检测到特定的错误码时，可以通过该文档迅速定位异常类别。")]),t._v(" "),e("hr"),t._v(" "),e("ul",[e("li",[t._v("令牌机制： 在前后端分离的解决方案中，权限的认证与授权是非常重要的。Lin 集成了"),e("code",[t._v("Flask_JWT_Extended")]),t._v("为系统提供了标准的令牌授予和刷新机制。具体细节请参考"),e("RouterLink",{attrs:{to:"/inside/jwt.html"}},[t._v("jwt")]),t._v("。")],1)]),t._v(" "),e("hr"),t._v(" "),e("ul",[e("li",[e("p",[t._v("红图机制：Flask 的蓝图机制对于路由粒度的控制相对粗糙，我们提供红图来更细粒度的分配路由，具体细节请参考"),e("RouterLink",{attrs:{to:"/inside/jwt.html"}},[t._v("jwt")]),t._v("。")],1)]),t._v(" "),e("li",[e("p",[t._v("参数检验：具体细节请参考"),e("RouterLink",{attrs:{to:"/inside/jwt.html"}},[t._v("jwt")]),t._v("。")],1)]),t._v(" "),e("li",[e("p",[t._v("模型驱动数据库： 具体细节请参考"),e("RouterLink",{attrs:{to:"/inside/jwt.html"}},[t._v("jwt")]),t._v("。")],1)]),t._v(" "),e("li",[e("p",[t._v("模型自动 Json 序列化： 具体细节请参考"),e("RouterLink",{attrs:{to:"/inside/jwt.html"}},[t._v("jwt")]),t._v("。")],1)])]),t._v(" "),e("p",[t._v("另外 Lin 为了支持插件，还包括了：")]),t._v(" "),e("ul",[e("li",[t._v("加载器（Loader）：插件的加载器")]),t._v(" "),e("li",[t._v("插件类（Plugin）：插件类")])]),t._v(" "),e("h2",{attrs:{id:"api-部分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#api-部分"}},[t._v("#")]),t._v(" API 部分")]),t._v(" "),e("p",[t._v("在 Lin 的基础版本中，提供了完备的用户系统和权限系统的 api。分别对应了 api 目录下的"),e("code",[t._v("admin.py")]),t._v("和"),e("code",[t._v("user.py")]),t._v("文件，暴露的接口分别是"),e("code",[t._v("/user")]),t._v("和"),e("code",[t._v("/admin")]),t._v("。")]),t._v(" "),e("p",[t._v("这些接口分别包括：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Tables")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Are")]),t._v(" "),e("th",{staticStyle:{"text-align":"right"}},[t._v("Cool")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("col 3 is")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("right-aligned")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("$1600")])]),t._v(" "),e("tr",[e("td",[t._v("col 2 is")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("centered")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("$12")])]),t._v(" "),e("tr",[e("td",[t._v("zebra stripes")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("are neat")]),t._v(" "),e("td",{staticStyle:{"text-align":"right"}},[t._v("$1")])])])]),t._v(" "),e("h2",{attrs:{id:"插件部分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#插件部分"}},[t._v("#")]),t._v(" 插件部分")]),t._v(" "),e("ul",[e("li",[t._v("logger 插件：Lin 的内置插件，为系统提供用户操作日志记录功能")]),t._v(" "),e("li",[t._v("notify 插件：Lin 的内置插件，为系统提供消息推送功能")])])])}),[],!1,null,null,null);n.default=a.exports}}]);